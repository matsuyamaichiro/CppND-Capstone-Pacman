@startuml
' http://www.plantuml.com/plantuml/uml/ can be used to get a png file. 

class Snake
class Pacman
class Monster
class Game
class Maze
class Renderer
class Controller

Game : +void Run()
Game : +int GetGridX()
Game : +int GetGridY()
Game : -std::shared_ptr<Maze> _maze
Game : -std::shared_ptr<Pacman> _pacman
Game : -std::vector<std::shared_ptr<Monster>> _monsters
Game : -std::random_device dev
Game : -std::mt19937 engine
Game : -int score
Game : -void Update()
Game o- "1" Maze
Game o- "1" Pacman
Game o- "*" Monster

Maze : +int getW()
Maze : +int getH()
Maze : +int getPacmanSpawnX()
Maze : +int getPacmanSpawnY()
Maze : +int GetMonstersNum()
Maze : +int GetMonsterSpawnX()
Maze : +int GetMonsterSpawnY()
Maze : +SpawnType GetMonsterSpawnType()
Maze : +PosType getPosType()
Maze : +bool isAvailable()
Maze : +void clearFood()
Maze : +int GetFoodNum()
Maze : +void GrowWall()
Maze : +bool IsGrowing()
Maze : -std::vector<std::string> Split(std::string& line, char delimiter);
Maze : -std::vector<std::unique_ptr<int[]>> ReadTable(std::string filename);
Maze : -void SetMaze(std::vector<std::unique_ptr<int[]>> table);
Maze : -int _w
Maze : -int _h
Maze : -int _pacman_spawn_x
Maze : -int _pacman_spawn_y
Maze : -std::vector<int> _monsters_spawn_x
Maze : -std::vector<int> _monsters_spawn_y
Maze : -std::vector<SpawnType> _monsters_spawn_type
Maze : -std::vector<std::vector<PosType>> _maze
Maze : -int _food_num
Maze : -bool _growing
Maze <.. Snake

Snake : +void Update()
Snake : +void SetPos()
Snake : +float GetPos()
Snake : +Color GetColor()
Snake : +void SetDirection()
Snake : +{static} float speed
Snake : #bool IsAvailable()
Snake : #Direction _direction
Snake : #float _x
Snake : #float _y
Snake : #Color _color
Snake : #bool _alive
Snake : std::mutex _mutex
Snake : -void ForceMove()
Snake : -Direction _hold_direction
Snake <|-- Pacman
Snake <|-- Monster

Monster : +void SetDirection()
Monster : +{static} Snake::Color GetColorFromSpawnType()

Pacman : +void Eaten()
Pacman : +bool IsAlive()
Pacman <.. Controller

Renderer : +void SetMaze()
Renderer : +void AppendSnake()
Renderer : +void RunRenderer()
Renderer : +void StopRenderer()
Renderer : +void SetScore()
Renderer : -void RenderMaze()
Renderer : -void RenderSnakes()
Renderer : -void Render()
Renderer : -void MainLoop()
Renderer : -void UpdateWindowTitle()
Renderer : -std::shared_ptr<Maze> _maze
Renderer : -std::vector<std::shared_ptr<Snake>> _snakes
Renderer : -SDL_Window *sdl_window
Renderer : -SDL_Renderer *sdl_renderer
Renderer : -const std::size_t screen_width
Renderer : -const std::size_t screen_height
Renderer : -const std::size_t grid_width
Renderer : -const std::size_t grid_height
Renderer : -int _target_frame_duration
Renderer : -bool _running
Renderer : -int _score
Renderer : -std::thread _thread
Renderer o- "1" Maze
Renderer o- "*" Snake
Renderer <. Game

Controller : +void HandleInput()
Controller : -void ChangeDirection()
Controller <. Game
@enduml